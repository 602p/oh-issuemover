{"status": "resolved", "priority": "feature", "title": "Create custom bug parser for GHC Trac", "milestone": "later", "superceder": "", "nosylist": ["mlinksva, paulproteus, soonick5"], "assigned": "soonick5", "waitingon": "", "keywords": [], "id": "626", "files": [{"url": "http://openhatch.org/bugs/file514/0001-When-difficulty-field-is-Easy-less-than-1-hour-then-.patch", "author": "soonick5"}], "history": [{"message": "This change is merged in\n<a href=\"https://github.com/openhatch/oh-bugimporters/commit/9f8d267e2a02a726c4ffd4a214247ceba9026fb6\">https://github.com/openhatch/oh-bugimporters/commit/9f8d267e2a02a726c4ffd4a214247ceba9026fb6</a>\n\nThanks!\n   \n", "author": "paulproteus"}, {"message": "I was looking for it, but didn't see it, and wondered if you hadn't \nsubmitted it.\n\nNow I realize I was looking at the wrong repository! My gravest \napologies; expect a review today!\n   \n", "author": "paulproteus"}, {"message": "Hello Asheesh,\n\nI submitted my pull request a while ago and nobody has checked it. Can you\nplease take a look and let me know if everything is correct.\n\nI will try to connect to IRC one of these days to talk about the next steps.\n\nRegards,\nAdrian Ancona\n   \n", "author": "soonick5"}, {"message": "Hello Asheesh,\n\nThanks for all your help. I just submitted the pull request after making the\ncorrections you suggested: <a href=\"https://github.com/openhatch/oh-bugimporters/pull/9\">https://github.com/openhatch/oh-bugimporters/pull/9</a>\n\nRegards,\nAdrian\n   \n", "author": "soonick5"}, {"message": "Hi soonick5!\n\nThis patch has just two trivial problems:\n\n* +        assert returned_data['good_for_newcomers'], '''The bug is considered \n\nThis line ends with a space character, this sort of \"trailing whitespace\" can\ncause merge conflicts down the road. So it's better to remove the space\ncharacter from the end of the line.\n\nAlso, in the Mock, you write: \"Haskell(GHK) tracker\" -- actually, it's \"GHC\",\nnot GHK.\n\nBeyond that, it looks great. I would merge it as-is, and if you want to make the\nabove changes before submitting the pull request, that'd be fine with me.\n\nThank you for your hard work!\n   \n", "author": "paulproteus"}, {"message": "Hello Asheesh,\n\nThanks for the instructions. I am attaching a new patch so you can give it a\nfinal review before I submit the pull request on github.\n\nI like adding comments to my assertions so readers of the tests can more easily\nunderstand what each assertion is doing. For that reason I didn't remove the\ncomment from my assertion. If this goes against any standard you have or for any\nreason think it is not correct I can remove it.\n\nPlease take a look and let me know if everything is correct, and if it is I will\nmake a pull request on github.\n\nThanks,\nAdrian\n   \n", "author": "soonick5"}, {"message": "Hi Adrian,\n\nSorry about my lack of clarity earlier! To reply to your questions:\n\n* By the \"verbose string\"I mean this:\n\n ('The bug is considered ' + 'good_for_newcomers because the value of the \ndifficulty ' + 'field is: \"Easy (less than 1 hour)\"')\n\nGood question about precise next steps. To clarify  that:\n\n* Remove the modification you did to TrackerModel(Mock)\n\n* Create a new class called HaskellTrackerModel -- it's okay to subclass \nTrackerModel and just override the attributes you want to override. The \nsubclassing idea is a good one, and didn't occcur to me!\n\nOther mini next steps:\n\n* Adjust your test so that you refer to HaskellTrackerModel -- in \ntest_bug_with_difficulty_easy_is_bitesize(), set the local variable \"tm\" to an \ninstance of HaskellTrackerModel.\n\n* Amend your commit so it doesn't have \"Wip\" in the commit log message (although \ngood on you for making work-in-progress commits -- those are helpful! It's just a \ngood idea to clean that up before it lands in the main codebase).\n\nThat should be it. Thanks for your patience, and also for the code! Ping this \nticket if you have any other questions.\n   \n", "author": "paulproteus"}, {"message": "Hello Asheesh,\n\nThanks for taking the time to check my patch. I have a few questions about your\ncomments, tough.\n\nI am not sure what is the verbose string you are talking about. Can you tell me\nwhich one is it?\n\nAlso, I am a little confused about what the next steps are. What I understood\nis: Remove the modification I did to the TrackerModel(Mock) class on the init\nfile and instead create a new one called HaskellTrackerModel. If this is\ncorrect...should I make HaskellTrackerModel inherit from TrackerModel instead of\nMock and just overwrite \"bitesized_type\" and \"bitesized_text\" attributes?\n\nIs this the only change I need to make?\n\nThanks,\nAdrian\n   \n", "author": "soonick5"}, {"message": "Hi Adrian! Sorry about the long delay; I have been traveling, but I could have let you know about the delay sooner!  I just kept \nthinking I'd have time to review it.\n\nYour patch is going along the right track -- with just a few changes, it can land.\n\nActually -- by the way -- your solution is more elegant than what I had imagined. So let's stick with your way and just fix a few \nthings.\n\nFirst, cosmetic problems. Your top commit has \"Wip\" in the commit log message, as if you saved your work but didn't clean things up \nbefore submitting. I recommend using \"git commit --amend\" to change just a commit log message, and \"git rebase -i origin/master\" to \nchange more than that.\n\nThe value \"good_for_newcomers\" is supposed to just have a Boolean value. There's no way you would necessarily know that, before-hand, \nbut because of what it corresponds to in the database a bool is all you need. No need for the helpful (but verbose) string you have \nthere.\n\nBeyond that:\n\nGood job adding the test data!\n\nThe way that TrackerModel objects are supposed to work, at the moment you can only select a single value for bitesized_type. So you \nshould implement logic that isn't splitting them on \",\" but instead supports each value individually.\n\nTo make that work well, you should have a separate TrackerModel for the difficulty: easy option. To make that, just copy-paste the \ncurrent TrackerModel and name it HaskellTrackerModel, and change the fields as needed (for example, change \"bitesized_type\" to \n\"difficulty\", etc.) in the new HaskellTrackerModel.\n\nI think that should be it.\n\nI said up-top this is more tidy than the way I was thinking -- I was initially imagining that we'd have to create a separate \nBugParser class for this case, but you showed that it can be tidily implemented within the current TracBugParser. That is awesome to \nsee!\n\nI'm no longer doing as much active travel, so I should be much more available for reviews.\n\nThanks!\n\n-- Asheesh.\n   \n", "author": "paulproteus"}, {"message": "I should have time to review this today. Thanks and sorry!\n   \n", "author": "paulproteus"}, {"message": "Hello Asheesh,\n\nIt's been some time since I submitted this patch and you haven't checked it. If\nyou are too busy, do you know if there is someone else who can help me review this?\n\nThanks,\nAdrian\n   \n", "author": "soonick5"}, {"message": "Hello Asheesh,\n\nJust checking if you have had time to check my patch?\n\nRegards,\nAdrian\n   \n", "author": "soonick5"}, {"message": "Hello Asheesh,\n\nThanks for creating that documentation, it was very helpful,\n\nI was finally able to write some code (patch attached) that I hope you can take\na look and let me know your comments, but I also have some questions.\n\n- In other projects I have been we usually create doc blocks for every method we\ncreate, including tests. Is this something that people do in python?\n- I usually add a message to all my assertions so the reader of my code can\nunderstand what exactly I am testing. Is this discouraged? Is the syntax I used ok?\n- I added the new field and value we are looking for in the TrackModel mock, I\nimagine I need to add those same values somewhere else. Where?\n\nThanks,\nAdrian\n   \n", "author": "soonick5"}, {"message": "Hi soonick5!\n\nI suggest that you keep things simple for now and try a more focused \napproach for this change. Instead of looking at the Django code, focus on \nthe contents of oh-bugimporters, and use the oh-bugimporters test suite to \nplay with the bug import process.\n\nIn the future it will be easier to run individual bug importers and see \nwhat data they download... perhaps you can even help with that transition \nin the future. For now, I'd say stick to running the code via the test \nsuite.\n\nI wrote up some new documentation for the oh-bugimporters code. Can you \nread <a href=\"http://oh-bugimporters.readthedocs.org/\">http://oh-bugimporters.readthedocs.org/</a> and let me know if that \nclarifies things?\n\nEspecially pay attention to the \"The role of multiple BugParsers\" \ndiscussion.\n\n-- Asheesh.\n   \n", "author": "paulproteus"}, {"message": "Investigating\n/home/adrian/Dev/oh-mainline/mysite/customs/management/commands/custom_daily_tasks.py\nit seems like I should have some data in my profile_citation table but it is empty\n   \n", "author": "soonick5"}, {"message": "search_bug is the table where the bugs information come from.\nApparently running\n\n$ python manage.py customs_daily_tasks\n\nIsn't updating the db\n   \n", "author": "soonick5"}, {"message": "I ran:\n\n$ python manage.py customs_daily_tasks\n$ python manage.py shell_plus\n\nAnd then this on the shell:\n\n&gt;&gt;&gt; Bug.all_bugs.all()\n\nAnd I got this:\n\n[&lt;Bug: title='0' project='GNOME-Do' project__language='C#' description='...'&gt;,\n&lt;Bug: title='1' project='d29187f31e2e4ba1b2ac43a74d6a40bf' project__language='C'\ndescription='...'&gt;]\n   \n", "author": "soonick5"}, {"message": "Hi Adrian! Sorry about the mess.\n\nHere's what I suggest: I'll write more documentation for oh-bugimporters \nso that this simple task is actually simple.\n\nHaving said that, I'll also answer your questions briefly here.\n\nOn Tue, 26 Jun 2012, soonick5 wrote:\n\n&gt; Hello,\n&gt;\n&gt; Thanks again for all your useful answers.\n&gt;\n&gt; I followed all the instructions from our chat but when it came to play \n&gt; with the Bugs class I didn't know what to do.\n\nIt's a Django model, so the shell gives you an interface to list all the \nrows in the database that correspond to that model.\n\nYou can get a list via:\n\nBub.all_bugs.all()\n\n&gt;\n&gt; I also tried looking at the data being updated in the database but I didn't know\n&gt; which table I needed to look at. In this same subject, a lot of the\n&gt; documentation talks about a MySQL database but the only database I see in my\n&gt; local is a SQLite database. Is this configured to be this way based on the\n&gt; environment or do I need to have a MySQL database that I currently don't have?\n\nIt's the sqlite database. We changed the defaults a year ago, or so, and \nnow that sqlite is the default.\n\n&gt;\n&gt; I did a very shallow check of what this does: python manage.py\n&gt; customs_daily_tasks and I didn't find where the actual importing of the code is\n&gt; made. Do you think you can point me to a file I can follow and move from it?\n\nYes! Will do shortly.\n\n&gt; I am still pretty new to Python and Django so I may be asking some very \n&gt; dump questions. If I am taking too long to do something that should be \n&gt; really easy I would be happy to move a simpler task.\n\nI think we can make this task work. Shortly I'll publish better docs and \ngive you a link in this ticket.\n   \n", "author": "paulproteus"}, {"message": "Hello,\n\nThanks again for all your useful answers.\n\nI followed all the instructions from our chat but when it came to play with the\nBugs class I didn't know what to do.\n\nI also tried looking at the data being updated in the database but I didn't know\nwhich table I needed to look at. In this same subject, a lot of the\ndocumentation talks about a MySQL database but the only database I see in my\nlocal is a SQLite database. Is this configured to be this way based on the\nenvironment or do I need to have a MySQL database that I currently don't have?\n\nI did a very shallow check of what this does: python manage.py\ncustoms_daily_tasks and I didn't find where the actual importing of the code is\nmade. Do you think you can point me to a file I can follow and move from it?\n\nI am still pretty new to Python and Django so I may be asking some very dump\nquestions. If I am taking too long to do something that should be really easy I\nwould be happy to move a simpler task.\n\nThanks,\nAdrian\n   \n", "author": "soonick5"}, {"message": "[18:40:59] &lt;soonick5&gt; Hello, does anyone know how can I execute a bug importer\nfrom oh-bugimporters?\n[18:42:12] &lt;paulproteus&gt; soonick5: Hi!\n[18:42:15] &lt;paulproteus&gt; Sorry I didn't reply on the ticket; busy day.\n[18:42:24] &lt;paulproteus&gt; Quickly, I think the best way is just to write a test\nin the test suite.\n[18:42:35] &lt;paulproteus&gt; There isn't a good stand-alone way to run individual\nbug importers yet.\n[18:42:49] &lt;paulproteus&gt; I want to migrate the bug importers to be more based on\n\"Scrapy\" so that's easier, but for now it's kind of hard.\n[18:42:57] &lt;soonick5&gt; Don't worry, I imagine you have your eyes in a lot of stuff\n[18:43:05] &lt;paulproteus&gt; So my recommendation as a coder is to write tests, and\nthen run the test suite, and watch the test pass/fail.\n[18:43:13] &lt;paulproteus&gt; Note also that you *can* run the code the way the\nbackend does.\n[18:43:19] &lt;paulproteus&gt; To do that, get a copy of oh-mainline, and \"cd\" into it.\n[18:43:25] &lt;paulproteus&gt; Make sure that it can find oh-bugimporters, and then:\n[18:43:35] &lt;paulproteus&gt; python manage.py customs_daily_tasks\n[18:43:40] &lt;paulproteus&gt; That, iirc, runs the bug importer.\n[18:44:24] &lt;paulproteus&gt; But because oh-mainline and oh-bugimporter are somewhat\ntightly-coupled, it's kind of a drag to test individual bug parsers/importers\nthis way.\n[18:44:42] &lt;soonick5&gt; How do I know if oh-mainline can find oh-bugimporters?\n[18:45:25] &lt;paulproteus&gt; python manage.py shell\n[18:45:27] &lt;paulproteus&gt; import bugimporters\n[18:45:32] &lt;paulproteus&gt; If that works, then you're in business.\n[18:45:50] &lt;paulproteus&gt; There's some autodetect magic where oh-mainline looks\nat ../oh-bugimporters and if it finds it there, it adds it to the path.\n[18:48:12] &lt;soonick5&gt; ok, that seemed to work\n[18:48:20] &lt;soonick5&gt; so once I run: python manage.py customs_daily_tasks\n[18:48:43] &lt;soonick5&gt; where can I check that the bugs were actually imported?\nwill that reflect in the database?\n[18:48:49] &lt;paulproteus&gt; Yeah, it'll be reflected in the database.\n[18:49:16] &lt;paulproteus&gt; The best way to see how it's reflected in the database\nis by: python manage.py shell_plus\n[18:49:32] &lt;paulproteus&gt; Play with the Bug class there.\n[18:50:56] &lt;soonick5&gt; Awesome. I think with all these information I can finally\nstart playing with my task\n[18:50:58] &lt;soonick5&gt; thanks\n[18:52:56] &lt;paulproteus&gt; My pleasure! Thanks for pinging here.\n   \n", "author": "paulproteus"}, {"message": "Thanks a lot for your answers.\n\nI started taking a look at the bug importers to make the suggested changes but\nnow I realized that I don't know how to run a bug importer so I can test what it\nis doing.\n\nDo you know how I can do a run of the bug importer or point me to documentation\nabout how to test this?\n\nThanks,\nAdrian\n   \n", "author": "soonick5"}, {"message": "On Sat, 16 Jun 2012, soonick5 wrote:\n\n&gt;\n&gt;\n&gt; I have a few questions before I can start making some progress on this ticket:\n&gt;\n&gt; - Should I be looking at oh-mainline or oh-bugimporters?\n\noh-bugimporters\n\n&gt; - Does the bug indexing happens on a cron job or is it manually triggered?\n\ncron job\n\n&gt; - It would be helpful to know what is the current result and what is the\n&gt; expected result so I know when I can mark this as completed.\n\nThe currnt result is that when you parse a Trac bug, the 'difficulty' key \nfrom the data table is ignored.\n\nThe expected result is that the 'difficulty' field can be used to infer \nthe value of \"good_for_newcomers\".\n\nAn easy implementation is to create a TracBugParser subclass that \noverrides the extract_tracker_specific_data() method (I think that's what \nit's called; blanking on name of method at the moment). \noh-bugimporters/bugimporters/bugzilla.py has sample BugParser subclasses. \nUnlike the Bugzilla ones, you'll subclass TracBugParser and put it in \ntrac.py.\n\n-- Asheesh.\n   \n", "author": "paulproteus"}, {"message": "I have a few questions before I can start making some progress on this ticket:\n\n- Should I be looking at oh-mainline or oh-bugimporters?\n- Does the bug indexing happens on a cron job or is it manually triggered?\n- It would be helpful to know what is the current result and what is the\nexpected result so I know when I can mark this as completed.\n\nThanks,\nAdrian\n   \n", "author": "soonick5"}, {"message": "Now that we've extracted oh-bugimporters, this would be great for e.g. the \nupcoming sprint. Not going to get done for 0.12.02, though.\n   \n", "author": "paulproteus"}, {"message": "This would be a pretty simple new BugParser.\n   \n", "author": "paulproteus"}, {"message": "On bugs in the Trac bug tracker for the GHC project, the Bug.good_for_newcomers\n(AKA bitesize) field should be set to True if the Trac data has a key called\n\n'difficulty'\n\nwhose value is\n\n'Easy (less than 1 hour)'\n\nMaybe we should do this with a custom bug parser. We could also make the web UI\n(even) more complex.\n   \n", "author": "paulproteus"}]}