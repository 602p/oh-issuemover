{"status": "chatting", "priority": "feature", "title": "Refactor our training missions' backend so that they use class-based views", "milestone": "later", "superceder": "", "nosylist": ["paulproteus"], "assigned": "paulproteus", "waitingon": "Missions: Switch subversion mission to purely use class-based views", "keywords": [], "id": "645", "files": [], "history": [{"message": "I'm going to bump this out of 0.12.02 into the future. Hopefully we'll get to it \nduring this weekend's sprint!\n   \n", "author": "paulproteus"}, {"message": "This is in progress -- the Subversion mission has the latest version of this.\n\nIt needs a bit more work, and I think we should finish this shortly. Marking as\n\"later\" for now because it's not ready for 0.11.12.\n   \n", "author": "paulproteus"}, {"message": "I'll take this. I think that doing this refactoring is a really good idea before\nI write up documentation on how to add missions.\n   \n", "author": "paulproteus"}, {"message": "(Note that we don't have to use Django's generic views system. We can instead\nuse our own classes.)\n   \n", "author": "paulproteus"}, {"message": "Right now, the various views in mysite/missions/*/*.py use a combination of a\nfew programming paradigms.\n\nThere is a class called MissionPageState that tracks the progress of a user\nthrough the steps of a particular mission (e.g. the svn mission).\n\nThe GET or POST requests for a page call functions which generally look very\nclose to the same.\n\nI think we can increase clarity and decrease lines of code by turning the\nmissions' views.py files into classes that use inheritance to move logic into\nunified places. \n\nWe can be inspired by the very simple TemplateView provided by Django, and as\nused in the Windows informational tutorial at mysite/missions/setup/views.py .\n   \n", "author": "paulproteus"}]}