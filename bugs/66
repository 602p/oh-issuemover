{"status": "resolved", "priority": "bug", "title": "i18n, mojibake: multibyte characters incorrectly handled in user profile & most settings", "milestone": "", "superceder": "", "nosylist": ["paulproteus, rafpaf, shadowspar"], "assigned": "", "waitingon": "", "keywords": [], "id": "66", "files": [], "history": [{"message": "Mojibake should all be fixed. utf8 wins the day.\n   \n", "author": "paulproteus"}, {"message": "I checked this out. If I run a CREATE TABLE, MySQL sets the default character\nset of that table to latin-1. So I ran this, and it fixed it:\n\nmysql&gt; alter database oh_milestone_a charset=utf8;\n\nBut that doesn't actually make any *existing* tables set their default character\nsets to utf8. That can be done with:\n\nmysql&gt; alter table profile_tag charset=utf8;\n\nBut that doesn't fix any column that already exists. *That* can be done by:\n\nmysql&gt; alter table profile_tag modify text varchar(255) character set utf8;\n\nAnd doing the above fixed profile tags.\n\nThis fashion of going forward is probably safe and correct. Unless it's not and\nwe're going to corrupt some people's non-ASCII data. I wonder. But we can always\njust try it, and then we'll have UTF-8-style mojibake instead of Latin-1-style\nmojibake or ????s around.\n   \n", "author": "paulproteus"}, {"message": "Summary:\n\nIn all of the fields listed on the Profile edit page, multibyte characters get\nturned into question marks on save.\n\nReproduction:\n\n1. Navigate to <a href=\"https://openhatch.org/profile/views/edit_info.\">https://openhatch.org/profile/views/edit_info.</a>\n2. Add some multibyte characters to any or all of the fields (eg (UNKNOWN CHARACTER)(UNKNOWN CHARACTER)(UNKNOWN CHARACTER)(UNKNOWN CHARACTER)).\n3. Click the \"Save\" button.\n4. Notice that the multibyte characters have been turned into question marks (????).\n\nISO-8859-1 characters (eg, the accented chars in \"d(UNKNOWN CHARACTER)v(UNKNOWN CHARACTER)l(UNKNOWN CHARACTER)pm(UNKNOWN CHARACTER)nt\") seem to work\ncorrectly.\n\nDesired outcome: \n\nMultibyte characters are correctly handled.  On save, users get back the same\ntext they entered, regardless of language or character set.\n   \n", "author": "shadowspar"}]}