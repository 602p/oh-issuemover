{"status": "resolved", "priority": "feature", "title": "Migrate Launchpad bug importer to Twisted", "milestone": "0.11.12", "superceder": "", "nosylist": ["armooo, paulproteus, pythonian4000"], "assigned": "armooo", "waitingon": "", "keywords": [], "id": "367", "files": [{"url": "http://openhatch.org/bugs/file434/0001-Create-a-launchpad-bugimporter.patch", "author": "armooo"}, {"url": "http://openhatch.org/bugs/file435/0002-Add-Launchpad-form-and-adjust-views-accordingly.patch", "author": "armooo"}, {"url": "http://openhatch.org/bugs/file436/0003-Added-bitesized-and-doc-tag-processing.patch", "author": "armooo"}, {"url": "http://openhatch.org/bugs/file437/0004-Removed-the-old-launchpad-bugtracker.patch", "author": "armooo"}, {"url": "http://openhatch.org/bugs/file432/asheesh-additions.patch", "author": "paulproteus"}, {"url": "http://openhatch.org/bugs/file438/launchpad_review2.patch", "author": "armooo"}], "history": [{"message": "I just deployed this.\n\nI made some small additions -- primarily, removing the LaunchpadQueryForm. I\nagree that the Model is needed, although I determined the Form is not.\n\nAlso the LaunchpadTrackerForm now causes a QueryModel to be created. That way,\nthe customs_twist.Command.update_trackers code will detect that it should\nrefresh that Launchpad tracker (as you pointed out).\n\nThis is totally great. Thanks!.\n   \n", "author": "paulproteus"}, {"message": "*  It looks like asheesh-additions.patch it making the TrackerQueryModel optional \nfrom the UI, but customs_twist.Command.update_trackers is based on the last \npolled date of the TrackerQueryModel. I could directly use TrackerQueryModel and \nnot LaunchpadQueryModel (if the django ORM is ok with it). Is this your suggestion?\n\n* I split the mysite/customs/bugimporters/base.py changes in to a new commit.\n\n* I removed self.bug_urls, but changed it to a call to process_bugs not \nhandle_task_data_json. This way the LaunchpadBug creation stays in one place and \nwe have the to call determine_if_finished which seems to be required to stop the \nreactor if no new bugs are found. The other process_bugs methods also take the \nsame list of (url, data).\n   \n", "author": "armooo"}, {"message": "This looks quite good. Just a few nitpicks:\n\n* You don't need a LaunchpadQueryModel at all since you don't use it\n\n* The changes to mysite/customs/bugimporters/base.py should be in their own\ncommit. (Good changes, though!)\n\n* This delta:\n\n+        # The bug data that show up in bug_collection['entries']\n+        # is equivalent to what we get back if we asked for the\n+        # data on that bug explicitly.\n+        for bug in bug_collection['entries']:\n+            self.bug_urls.append((bug['web_link'], bug))\n\narguably reproduces logic available in:\n\n+    def handle_task_data_json(self, data, lp_bug):\n\nSo why don't you just call the handle_task_data_json() method?\n\nIn asheesh-additions.patch there are some changes that, effectively, make URL\nmodels optional. I suggest adding those to your patchset.\n\nAlso, it's easier to review if you do:\n\ngit format-patch --stdout master &gt; entire-series-in-one-file.patch\n\nCan you address those items? Beyond those things, this looks great, and I'm\nthrilled that we can likely land this quite soon.\n   \n", "author": "paulproteus"}, {"message": "A further thought:\n\nThe way we're modeling things now, there is one Launchpad BugTracker per project.\n\nThis is a little odd for the following case: if someone adds a bug to their\nproject, but then within Launchpad the same bug ID is reassigned to some other\nproject, we might handle things wrong.\n\nIt's something we should just make sure to cook up a test for, and be\nhappy-enough with the results at some point.\n   \n", "author": "paulproteus"}, {"message": "Three more notes:\n\n1. I might be wrong about when a call to self.push_urls_onto_reactor() is needed.\n\n2. Feel free to make liberal use of the FakeGetPage() object at the top of\nmysite/customs/tests.py. If you use @mock.patch() to patch out the real getPage\nwith that one, then that will let you download arbitrary URLs (so long as you\nsave a copy of them somewhere in the repo) during a run of a test.\n\n3. I can totally see how crazy this code is now. Luckily there are some ideas\nfor cleaning up our use of Twisted, which would de-insane it.\n\nI don't think this is going to be done before 0.11.11, but we've made a lot of\nreally good progress on it! Marking as \"later,\" but I'm hoping we can land it\nfor 0.11.12.\n   \n", "author": "paulproteus"}, {"message": "Here's the progress of work on this so far:\n\n* armooo has a branch on Gitorious with some work:\n<a href=\"https://gitorious.org/~armooo/openhatch/armooos-oh-mainline/commits/launchpad\">https://gitorious.org/~armooo/openhatch/armooos-oh-mainline/commits/launchpad</a> ,\nstarted at the Dec 4 OpenHatch sprint.\n\n* I took a look at it, and have some remarks as well as patches.\n\nIn general, you don't have to call self.process_queries() with the Launchpad\nBugImporter class; that should be handled by the framework.\n\nI notice the new Launchpad importer has no subclass of \"BugParser\". This is a\nconvention; it seems it's okay to not follow it. The most idiomatic use of\nBugParser can be seen in bugimporters/bugzilla.py \n\nI added a test and some sample data and did a little bit of cleanup in the\nattached patches. They should apply cleanly on top of the current state of\narmooo's gitorious branch; armooo, feel free to push them on top your branch\nimmediately.\n   \n", "author": "paulproteus"}, {"message": "If we do this, we have to write our own consumer of the Launchpad API, I think.\n\nThat's life. Let's do it. Marking as 0.11.11.\n   \n", "author": "paulproteus"}, {"message": "This issue is tracked in <a href=\"issue260\">issue260</a>.\n   \n", "author": "pythonian4000"}]}