{"status": "chatting", "priority": "bug", "title": "When a TrackerModel changes its base_url, Bug objects need to change their canonical_bug_link", "milestone": "", "superceder": "", "nosylist": ["paulproteus, pythonian4000"], "assigned": "", "waitingon": "", "keywords": [], "id": "394", "files": [], "history": [{"message": "I like this idea, and I would add: the TrackerModel should only change bugs that\npoint to it as their bug.tracker.\n\nLuckily Bug objects store that pointer now.\n\nThis is a reasonably easy thing to do, though it's not quite \"bitesize\". The\nimplementation I'm imagining would use Django signals to change the Bug objects\nwhenever the TrackerModel changes.\n\nThis should be covered by an automated test.\n   \n", "author": "paulproteus"}, {"message": "I encountered this while migrating the Roundup importer to they async framework:\nCurrently the hard-coded OpenHatch bug tracker has <a href=\"http://openhatch.org/bugs/\">http://openhatch.org/bugs/</a> as\nits base_url, but when I put it in my local web interface I used\n<a href=\"https://openhatch.org/bugs/.\">https://openhatch.org/bugs/.</a> As a result, all the Bugs got duplicated. This is\nunavoidable when transferring a hard-coded tracker to the web interface, but it\ncan also occur if a tracker is in the web interface and then a user changes the\nbase_url, e.g. to use SSL, or if the tracker moves.\n\nIt should be fixable in the web interface backend; when you are updating a\nTrackerModel's info, check if base_url has changed. If so, grab all Bugs whose\ncanonical_bug_link contains the old base_url, and do a string replace at the\nstart of the canonical_bug_link replacing it for the new base_url.\n   \n", "author": "pythonian4000"}]}