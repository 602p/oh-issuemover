{"status": "resolved", "priority": "wish", "title": "OpenSolaris bug import code should only download the bug if our copy is more than a day old", "milestone": "", "superceder": "", "nosylist": ["paulproteus, pythonian4000"], "assigned": "", "waitingon": "", "keywords": ["bitesize"], "id": "91", "files": [{"url": "http://openhatch.org/bugs/file26/issue91.patch", "author": "pythonian4000"}], "history": [{"message": "One more problem -- you indented the update() function too far in. I de-dented it.\n\nBecause it was indented too far, the call to update() in\nsearch/management/commands/search_daily_tasks.py could not find update().\n\nFixed, and pushed. Thanks for your contribution!\n   \n", "author": "paulproteus"}, {"message": "This is awesome. I've just pushed it onto origin/master.\n\nYou should now:\n\n$ git fetch\n$ git rebase origin/master\n\nand you'll see that git squashes away your commit (since it's already on\norigin/master).\n\nI did have to run \"M-x untabify\" -- in the future, please try to submit patches\nthat only use spaces to indent, not tabs. (It's okay -- I fixed it this time!)\n\nYou rule. Thank you. (Please add the OpenHatch project to your profile!) (-:\n   \n", "author": "paulproteus"}, {"message": "All done, here is the patch with everything this time!\n   \n", "author": "pythonian4000"}, {"message": "Wow, this patch is amazing. Thanks for writing a test!\n\nThe test fails for me -- I lack the sample data file. I guess you should do the\nfollowing:\n\n1. Use \"git add\" and \"git commit\" to make this into a commit, locally on your\nmachine\n\n2. Use \"git format-patch\" to re-attach a new patch\n\n3. When I review your git format-patch file, and I commit and push that into\norigin/master, I can show you how to use \"git rebase\" to have git figure out\nwhat to do.\n\nP.S. Major thanks for tackling this!\n   \n", "author": "paulproteus"}, {"message": "Thanks for the assistance paulproteus! Patch file follows.\n   \n", "author": "pythonian4000"}, {"message": "I have tests and a fix for this sitting in my workspace, with little idea how to\nget them out! Seems I can't create a patch without committing, and I don't\nreally want to commit for fear of messing with the master copy (am new to Git),\nso I will ask on IRC first ^_^\n   \n", "author": "pythonian4000"}, {"message": "We have a special bug importer for OpenSolaris OS/Net bugs that are considered\n\"bitesized\". The way bug importing works is that we read some information from\nthe remote bug tracker, and we save it in the OpenHatch database in an object\nwhose type is \"Bug\".\n\nIf you read our other bug tracker importing code, you'll see we do an \"if\" test:\nif the OpenHatch Bug object's last_polled field is between right now and one day\nin the past, we don't bother downloading the bug again from the\n\nBut for OpenSolaris OS/Net, that check isn't part of the code. So if we run the\nnightly bug import script more often than once every 24 hours, we'll download\nbugs from OpenSolaris's bug tracker too often. We want to be a good citizen and\nnot hammer them, so this is a bug!\n\nA good fix for this would use mock.patch() to mock out calls to the network, and\ncarefully construct one bug that we *should* update, and one bug we should *not*\nupdate.\n\nWe would also accept a fix that had no test for this, though!\n   \n", "author": "paulproteus"}]}