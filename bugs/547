{"status": "testing", "priority": "wish", "title": "It would be nice if the migrations ran on MySQL 5.5", "milestone": "later", "superceder": "", "nosylist": ["paulproteus"], "assigned": "paulproteus", "waitingon": "", "keywords": [], "id": "547", "files": [{"url": "http://openhatch.org/bugs/file388/original", "author": "paulproteus"}], "history": [{"message": "This is no longer very important because dev setups use sqlite now.\n   \n", "author": "paulproteus"}, {"message": "This probably already works, but needs testing.\n   \n", "author": "paulproteus"}, {"message": "This format-patch file contains some commits I referred-to in <a href=\"msg2384\">msg2384</a> .\n   \n", "author": "paulproteus"}, {"message": "I'm not going to work on this for a while (more than 10 days), and so I \nwanted to leave the bug in good shape in case anyone else wants to come \nby and take a look at it.\n\nThe core of the problem is that MySQL gives the \"errno 150\" and \n\"Renaming table... failed\" messages when there is a foreign key \nconstraint that is not being respected.\n\nThe two things that we do that trigger this problem are:\n\n* Add foreign keys connections between models\n* Drop foreign key connections between models\n\nThe good news it's easy to fix the \"Add foreign keys\" cases. The \nmigrations that we've created in the past used version 1 of the South \nAPI. If we call the (basically) same method in version 2 of the South \nAPI, we can fix the issue. Here's a sample delta that fixes one such \nproblem:\n\n+from south.v2 import SchemaMigration\n \n-class Migration:\n+class Migration(SchemaMigration):\n     \n     def forwards(self, orm):\n         \n         # Adding field 'Answer.project'\n-        db.add_column('search_answer', 'project', \norm['search.answer:project'])\n+        db.add_column('search_answer', 'project', \nself.gf('django.db.models.fields.related.ForeignKey')(default=None, \nto=orm['search.Project']), keep_default=False)\n\nTo fix all those, we should probably look for references to add_column \nthrough the migrations, and make sure they are using the new South API.\n\nAs for the second category of problem, we need to remove the foreign \nkey constraint from the tables that are affected. I don't currently \nknow a way to ask South to do that, but it is likely that such a way \nexists.\n\nI'm attaching a format-patch file that contains my (extremely messy) \nattempts to fix this.\n   \n", "author": "paulproteus"}, {"message": "LATEST FOREIGN KEY ERROR indicates:\n\n110826  5:24:53 Error in foreign key constraint of table\noh_milestone_a/search_projectinvolvementquestion:\nthere is no index in the table which would contain\nthe columns as the first columns, or the data types in the\ntable do not match the ones in the referenced table\nor one of the ON ... SET NULL columns is declared NOT NULL. Constraint:\n,\n  CONSTRAINT \"project_id_refs_id_30837ad\" FOREIGN KEY (\"project_id\") REFERENCES\n\"search_project\" (\"id\")\nInnoDB: Renaming table `oh_milestone_a`.&lt;result 2 when explaining filename\n'#sql-4d98_2c'&gt; to `oh_milestone_a`.`search_projectinvolvementquestion` failed!\n   \n", "author": "paulproteus"}, {"message": "The good news is that I can reproduce this problem. Within a Debian VM that runs\nMySQL 5.5:\n\nError in migration: search:0034_answer_points_to_project_and_so_does_question\nTraceback (most recent call last):\n  File \"./bin/mysite\", line 87, in &lt;module&gt;\n    djangorecipe.manage.main('mysite.settings')\n  File \"/vagrant/eggs/djangorecipe-0.23.1-py2.6.egg/djangorecipe/manage.py\",\nline 16, in main\n    management.execute_manager(mod)\n  File \"/vagrant/parts/mysite/django/core/management/__init__.py\", line 438, in\nexecute_manager\n    utility.execute()\n  File \"/vagrant/parts/mysite/django/core/management/__init__.py\", line 379, in\nexecute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File \"/vagrant/parts/mysite/django/core/management/base.py\", line 191, in\nrun_from_argv\n    self.execute(*args, **options.__dict__)\n  File \"/vagrant/parts/mysite/django/core/management/base.py\", line 220, in execute\n    output = self.handle(*args, **options)\n  File\n\"/vagrant/eggs/South-0.7.3.1-py2.6.egg/south/management/commands/migrate.py\",\nline 107, in handle\n    ignore_ghosts = ignore_ghosts,\n  File \"/vagrant/eggs/South-0.7.3.1-py2.6.egg/south/migration/__init__.py\", line\n191, in migrate_app\n    success = migrator.migrate_many(target, workplan, database)\n  File \"/vagrant/eggs/South-0.7.3.1-py2.6.egg/south/migration/migrators.py\",\nline 222, in migrate_many\n    result = migrator.__class__.migrate_many(migrator, target, migrations, database)\n  File \"/vagrant/eggs/South-0.7.3.1-py2.6.egg/south/migration/migrators.py\",\nline 293, in migrate_many\n    result = self.migrate(migration, database)\n  File \"/vagrant/eggs/South-0.7.3.1-py2.6.egg/south/migration/migrators.py\",\nline 126, in migrate\n    result = self.run(migration)\n  File \"/vagrant/eggs/South-0.7.3.1-py2.6.egg/south/migration/migrators.py\",\nline 100, in run\n    return self.run_migration(migration)\n  File \"/vagrant/eggs/South-0.7.3.1-py2.6.egg/south/migration/migrators.py\",\nline 81, in run_migration\n    migration_function()\n  File \"/vagrant/eggs/South-0.7.3.1-py2.6.egg/south/migration/migrators.py\",\nline 57, in &lt;lambda&gt;\n    return (lambda: direction(orm))\n  File\n\"/vagrant/mysite/search/migrations/0034_answer_points_to_project_and_so_does_question.py\",\nline 30, in forwards\n    db.delete_column('search_projectinvolvementquestion', 'project_id')\n  File \"/vagrant/eggs/South-0.7.3.1-py2.6.egg/south/db/generic.py\", line 36, in\n_column_rm\n    return func(self, table, column, *args, **opts)\n  File \"/vagrant/eggs/South-0.7.3.1-py2.6.egg/south/db/mysql.py\", line 133, in\ndelete_column\n    super(DatabaseOperations, self).delete_column(table_name, name)\n  File \"/vagrant/eggs/South-0.7.3.1-py2.6.egg/south/db/generic.py\", line 36, in\n_column_rm\n    return func(self, table, column, *args, **opts)\n  File \"/vagrant/eggs/South-0.7.3.1-py2.6.egg/south/db/generic.py\", line 779, in\ndelete_column\n    self.execute(self.delete_column_string % params, [])\n  File \"/vagrant/eggs/South-0.7.3.1-py2.6.egg/south/db/generic.py\", line 214, in\nexecute\n    cursor.execute(sql, params)\n  File \"/vagrant/parts/mysite/django/db/backends/util.py\", line 15, in execute\n    return self.cursor.execute(sql, params)\n  File \"/vagrant/parts/mysite/django/db/backends/mysql/base.py\", line 86, in execute\n    return self.cursor.execute(query, args)\n  File \"/usr/lib/pymodules/python2.6/MySQLdb/cursors.py\", line 166, in execute\n    self.errorhandler(self, exc, value)\n  File \"/usr/lib/pymodules/python2.6/MySQLdb/connections.py\", line 35, in\ndefaulterrorhandler\n    raise errorclass, errorvalue\n_mysql_exceptions.OperationalError: (1025, \"Error on rename of\n'./oh_milestone_a/#sql-4d98_2c' to\n'./oh_milestone_a/search_projectinvolvementquestion' (errno: 150)\")\n\nSo hopefully that means I can fix it. Stay tuned for that.\n   \n", "author": "paulproteus"}, {"message": "I'm taking a look at this inside a virtual machine to see if I can reproduce it.\n\nGetting MySQL running on a Debian virtual machine has been slow going, but I hope \nto be able to at least say \"yes\"/\"no\" that I can reproduce this within a day.\n   \n", "author": "paulproteus"}, {"message": "Mkman on IRC reports that, with MySQL 5.5, the migrations fail with a duplicate\ncolumn name error.\n\nThe next step is to install MySQL 5.5 somewhere and see if the migrations work.\nIf so, then we're confused. If they fail, then we can debug the problem and\ncommit a fix.\n   \n", "author": "paulproteus"}]}