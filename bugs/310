{"status": "resolved", "priority": "urgent", "title": "Remove our HitCountCache django model, and use Django's caching framework instead", "milestone": "0.11.06", "superceder": "", "nosylist": ["jesstess, jl, ktarnowski, palhmbs, paulproteus, viv"], "assigned": "paulproteus", "waitingon": "", "keywords": [], "id": "310", "files": [{"url": "http://openhatch.org/bugs/file357/0001-issue-310-Fixing-HitCountCache.patch", "author": "viv"}, {"url": "http://openhatch.org/bugs/file358/0002-issue-310-Fixing-HitCountCache.patch", "author": "viv"}, {"url": "http://openhatch.org/bugs/file359/0003-issue-310-Fixing-HitCountCache.patch", "author": "viv"}, {"url": "http://openhatch.org/bugs/file363/0004-Updated-comments-when-cache-count-value-is-0.patch", "author": "viv"}, {"url": "http://openhatch.org/bugs/file364/0005-removed-import-of-Timestamp-and-instead-referred-by-.patch", "author": "viv"}, {"url": "http://openhatch.org/bugs/file367/unnamed", "author": "viv"}], "history": [{"message": "One issue popped up in the tests that I didn't catch in review.\n\nI fixed it with this commit: \n<a href=\"http://gitorious.org/openhatch/oh-mainline/commit/5b680bf39cb4c147c07c1a583f2509ebe0597eaf\">http://gitorious.org/openhatch/oh-mainline/commit/5b680bf39cb4c147c07c1a583f2509ebe0597eaf</a>\n\n-- Asheesh.\n   \n", "author": "paulproteus"}, {"message": "Thanks for reviewing and implementing it.. I will look forward for\nmore bite-size fixes...\n\nOn Wed, Jul 6, 2011 at 8:26 PM, Asheesh Laroia &lt;<a href=\"mailto:bugs@openhatch.org\">bugs@openhatch.org</a>&gt; wrote:\n\n&gt;\n&gt; Asheesh Laroia &lt;<a href=\"mailto:asheesh@asheesh.org\">asheesh@asheesh.org</a>&gt; added the comment:\n&gt;\n&gt; Hi Vivek,\n&gt;\n&gt; I like the more descriptive git commit log messages for the 0004 and 0005\n&gt; patches. In the future, try to make them all like that.\n&gt;\n&gt; I'm merging this work now and deploying. Thank you for it! The site is\n&gt; actually\n&gt; very likely to load faster now.\n&gt;\n&gt; ----------\n&gt; milestone: 0.11.07 -&gt; 0.11.06\n&gt; status: need-review -&gt; resolved\n&gt;\n&gt; __________________________________________\n&gt; Roundup issue tracker &lt;<a href=\"mailto:bugs@openhatch.org\">bugs@openhatch.org</a>&gt;\n&gt; &lt;<a href=\"https://openhatch.org/bugs/issue310\">https://openhatch.org/bugs/issue310</a>&gt;\n&gt; __________________________________________\n&gt;\n   \n", "author": "viv"}, {"message": "Hi Vivek,\n\nI like the more descriptive git commit log messages for the 0004 and 0005\npatches. In the future, try to make them all like that.\n\nI'm merging this work now and deploying. Thank you for it! The site is actually\nvery likely to load faster now.\n   \n", "author": "paulproteus"}, {"message": "Hi Viv! I didn't realize this was in need-review state. I'll review your patches, \nand if I would have accepted them on June 30, they get marked as part of the \n0.11.06 release.\n   \n", "author": "paulproteus"}, {"message": "Ready for review\n   \n", "author": "viv"}, {"message": "Hi Vivek,\n\nSome feedback on the patches.\n\nFirst, it would be good to write more meaningful commit log messages. It's good\nthat you have multiple commits with separate content, but you should explain in\nthe messages what they are about.\n\nIn mysite/search/controllers.py you do a \"from mysite.base.models import\nTimestamp\", but mysite.base.models is already imported; it'd be better if you\ndon't add a new import but just refer to Timestamp the long way\n(mysite.base.models.Timestamp) within that file.\n\nI'm glad you added the logging that you did.\n\nThis comment:\n\n+        # We need to be careful here, as a cached count of zero would be\n+        # read here as a None value, when we only want to pick up an\n+        # actual None value (corresponding to the cache key not\n+        # existing).\n\nseems odd. I would change it to:\n\n\"We need to be careful to check if the count is None, rather than just if the\ncount is a false value. That's because a value of zero is still a cached value;\nif we just use a boolean test, we would mistake the zero value for an empty\ncache and regenerate the cache needlessly.\"\n\nOtherwise, in general, this code looks great. I haven't run the tests on it, but\nit looks like it should pass them. If you resubmit with improved log messages, I\nwill run the tests and deploy.\n\nAnd thanks for being persistent about getting review, and sorry it took so long.\n   \n", "author": "paulproteus"}, {"message": "Hey Vivek,\n\nThis is looking better. I don't think it's quite there, though.\n\nHere's some feedback, in order of increasing importance:\n\nNot that important\n------------------\n\nI would advise making fewer changes per commit. Make a bunch of small commits \nthat indicate individual pieces of work. For example, one way to reorganize \nthings would be:\n\n* First commit: Add the new hit_count_cache_timestamp stuff, and the method to \nthe Query called get_hit_count_cache_key()\n* Second commit: Add the tests for the new functionality\n* Second commit: totally remove the old HitCountCache model, including its tests\n* Third commit: Write a migration that removes the HitCountCache model\n\nSomething like that. I'm not totally sure that would work in this case, since \nyou're changing current functionality, but anyway, smaller patches are always \neasier to review.\n\nSomewhat important\n------------------\n\nIt'd be great if you'd extract the \"hit_count_cache_timestamp\" string to a named \nconstant somewhere.\n\nIn the new get_or_create_cached_hit_count() method, you call \nlogging.info(hit_count). That log message isn't very useful without also knowing \nwhat the query is that we're caching. So maybe that could go in the log message, \ntoo.\n\nIn the post_bug_delete_increment_bug_model_timestamp() function, you change the \nindent level of the \"always bump it\" comment, but for no reason, it seems. If \nyou're going to make whitespace changes like that, make them in a separate \ncommit.\n\nIn the post_bug_save_delete_increment_hit_count_cache_timestamp() function, you \nindent the code deeper than I'd expect. Also, we don't have to bump the timestamp \nfor the raw or created cases. (The \"raw\" case is when we are loading a data from \na snapshot. The \"created\" case is when we learn about a new bug. It is safe to \nprovide recommendations that ignore the presence of new bugs, so we don't have to \nbump the timestamp in this case. Basically, you can keep the current logic -- but \nif the logic is unclear, and you can make it clearer, then totally add comments.) \nYour changes aren't *wrong* per se, but they will bump the timestamp more often \nthan we have to, thereby increasing server load.\n\nAlso, in the definition of the post_bug_save_increment_bug_model_timestamp() \nfunction, you should put a space after the commas in \"sender,instance,**kwargs\". \nI think you have excessive indenting there, too.\n\nShowstoppers\n------------\n\nThese are must-fix issues:\n\n* In the original file, the models.signals.post_save.connect() call that binds \nBug to post_bug_save_delete_increment_hit_count_cache_timestamp -- those calls \nare made at module import time. Instead, you make them as part of the \npost_bug_save_increment_bug_model_timestamp function (due to indenting changes).\n\nTips\n----\n\nIn general, it's a really good idea to look at your patch in \"gitk\" or \"git log -\np\". I *urge* you to enable the color diff mode of git; it makes reading patches \nmuch easier. Check out <a href=\"http://book.git-scm.com/5_customizing_git.html\">http://book.git-scm.com/5_customizing_git.html</a> (search for \n\"color\").\n\nI think that's all I have. Fix the indenting, and resubmit, and you'll have a big \nchangeset in.\n\nMy apologies if this seems like a long process. You're nearly done!\n   \n", "author": "paulproteus"}, {"message": "Please review the changes\n   \n", "author": "viv"}, {"message": "Hi Asheesh,\n\nActually I initially created this patch using PyCharm and then realized that\nthe patch was not git compatible, So I thought of work on it more and test\nthe patch myself before sending for review/implementation, I communicated\nthe same to Paul also.\n     If you feel the patch is reasonably ok then I wont do more work on\nthat, but the patch is verbatim implementation of pythonian4000 sample\nimplementation, I am already ashamed of not investing enough time to solve\nit myself and it would be burden on me, if I take any credit for\nthe implementation. All glory to pythonian4000.\n      I will implement the changes you suggested and send the patch by\nMonday. Please let me know if there is anything else can be enhanced.\n\nThanks,\n\nVivek\n\nOn Sat, Jun 4, 2011 at 9:42 PM, Asheesh Laroia &lt;<a href=\"mailto:bugs@openhatch.org\">bugs@openhatch.org</a>&gt; wrote:\n\n&gt;\n&gt; Asheesh Laroia &lt;<a href=\"mailto:asheesh@asheesh.org\">asheesh@asheesh.org</a>&gt; added the comment:\n&gt;\n&gt; Vivek,\n&gt;\n&gt; This patch looks good at a first glance!\n&gt;\n&gt; Actually, it looks really really great. I think this is the highest-quality\n&gt; patch\n&gt; I have seen for a first or second or third contribution. Here are some of\n&gt; the\n&gt; things you did right:\n&gt;\n&gt; * Extensive commenting\n&gt; * A test for the test suite right off the bat\n&gt; * Extremely reasonable use of Django signals\n&gt; * A completely proper migration\n&gt;\n&gt; I'm sitting here muttering to myself, \"This is truly amazing.\" It's really\n&gt; good\n&gt; work.\n&gt;\n&gt; There are just a few things you should change. The first and most important\n&gt; one\n&gt; is the one palhmbs pointed out: You should submit your work as a git\n&gt; format-patch\n&gt; file. You should commit locally, then export it to a file.\n&gt; <a href=\"http://openhatch.org/wiki/How_we_handle_patches\">http://openhatch.org/wiki/How_we_handle_patches</a> and the git training\n&gt; mission on\n&gt; the OpenHatch site explain how to do this.\n&gt;\n&gt; Code-wise:\n&gt;\n&gt; * Use logging.debug(), not print\n&gt; ** (Using \"print\" in a WSGI context isn't good. See also\n&gt; <a href=\"http://blog.dscpl.com.au/2009/04/wsgi-and-printing-to-standard-output.html\">http://blog.dscpl.com.au/2009/04/wsgi-and-printing-to-standard-output.html</a>)\n&gt;\n&gt; * Use a space after every comma\n&gt; ** This is just a style thing, but it makes code more readable. For\n&gt; example, in\n&gt; the new get_hit_count_cache_key():\n&gt;\n&gt;        hit_count_cache_key = \"hcc_%s_%s\" %\n&gt; (hashlib.sha1(hcc_timestamp.__str__()).hexdigest(),hashed_query)\n&gt;\n&gt; would become\n&gt;\n&gt;        hit_count_cache_key = \"hcc_%s_%s\" %\n&gt; (hashlib.sha1(hcc_timestamp.__str__()).hexdigest(), hashed_query)\n&gt;\n&gt; Small change.\n&gt;\n&gt; * Always use consistent indenting, even for comment lines. Here:\n&gt;\n&gt; +    def get_or_create_cached_hit_count(self):\n&gt; +       # Get the cache key used to store the hit count.\n&gt; +        hit_count_cache_key = self.get_hit_count_cache_key()\n&gt;\n&gt; should be:\n&gt;\n&gt; +    def get_or_create_cached_hit_count(self):\n&gt; +        # Get the cache key used to store the hit count.\n&gt; +        hit_count_cache_key = self.get_hit_count_cache_key()\n&gt;\n&gt; Move that comment one space deeper in.\n&gt;\n&gt; * You have made the\n&gt; post_bug_save_delete_increment_hit_count_cache_timestamp()\n&gt; function be part of the WannaHelperNote class due to indenting it. You\n&gt; should\n&gt; undo the indenting so that it's not part of the class definition.\n&gt;\n&gt; Fix those, and moreover, resubmit it as a git format-patch file. Thanks for\n&gt; the\n&gt; work you've done here!\n&gt;\n&gt; __________________________________________\n&gt; Roundup issue tracker &lt;<a href=\"mailto:bugs@openhatch.org\">bugs@openhatch.org</a>&gt;\n&gt; &lt;<a href=\"https://openhatch.org/bugs/issue310\">https://openhatch.org/bugs/issue310</a>&gt;\n&gt; __________________________________________\n&gt;\n   \n", "author": "viv"}, {"message": "Vivek,\n\nThis patch looks good at a first glance!\n\nActually, it looks really really great. I think this is the highest-quality patch \nI have seen for a first or second or third contribution. Here are some of the \nthings you did right:\n\n* Extensive commenting\n* A test for the test suite right off the bat\n* Extremely reasonable use of Django signals\n* A completely proper migration\n\nI'm sitting here muttering to myself, \"This is truly amazing.\" It's really good \nwork.\n\nThere are just a few things you should change. The first and most important one \nis the one palhmbs pointed out: You should submit your work as a git format-patch \nfile. You should commit locally, then export it to a file. \n<a href=\"http://openhatch.org/wiki/How_we_handle_patches\">http://openhatch.org/wiki/How_we_handle_patches</a> and the git training mission on \nthe OpenHatch site explain how to do this.\n\nCode-wise:\n\n* Use logging.debug(), not print\n** (Using \"print\" in a WSGI context isn't good. See also \n<a href=\"http://blog.dscpl.com.au/2009/04/wsgi-and-printing-to-standard-output.html\">http://blog.dscpl.com.au/2009/04/wsgi-and-printing-to-standard-output.html</a> )\n\n* Use a space after every comma\n** This is just a style thing, but it makes code more readable. For example, in \nthe new get_hit_count_cache_key():\n\n        hit_count_cache_key = \"hcc_%s_%s\" % \n(hashlib.sha1(hcc_timestamp.__str__()).hexdigest(),hashed_query)\n\nwould become\n\n        hit_count_cache_key = \"hcc_%s_%s\" % \n(hashlib.sha1(hcc_timestamp.__str__()).hexdigest(), hashed_query)\n\nSmall change.\n\n* Always use consistent indenting, even for comment lines. Here:\n\n+    def get_or_create_cached_hit_count(self):\n+       # Get the cache key used to store the hit count.\n+        hit_count_cache_key = self.get_hit_count_cache_key()\n\nshould be:\n\n+    def get_or_create_cached_hit_count(self):\n+        # Get the cache key used to store the hit count.\n+        hit_count_cache_key = self.get_hit_count_cache_key()\n\nMove that comment one space deeper in.\n\n* You have made the post_bug_save_delete_increment_hit_count_cache_timestamp() \nfunction be part of the WannaHelperNote class due to indenting it. You should \nundo the indenting so that it's not part of the class definition.\n\nFix those, and moreover, resubmit it as a git format-patch file. Thanks for the \nwork you've done here!\n   \n", "author": "paulproteus"}, {"message": "Viv, The Patch isn't a git patch - take a look at how we handle patches...\n\n<a href=\"http://openhatch.org/wiki/How_we_handle_patches\">http://openhatch.org/wiki/How_we_handle_patches</a>\n\nMoving to 11.06, cause it just not May anymore :'(\n   \n", "author": "palhmbs"}, {"message": "Thanks to the changes done by Pythonian4000. I am \nsubmitting the patch for 310.\n   \n", "author": "viv"}, {"message": "I'm moving this forward to 0.11.05, since it's not yet done, and it's May in my \ntime zone!\n   \n", "author": "paulproteus"}, {"message": "<a href=\"http://docs.djangoproject.com/en/1.2/topics/cache/\">http://docs.djangoproject.com/en/1.2/topics/cache/</a> explains more about the Django \ncache framework.\n   \n", "author": "paulproteus"}, {"message": "(This is important, but it's not assigned to anyone, so for now I am removing it\nfrom the milestone.)\n   \n", "author": "paulproteus"}, {"message": "Jennifer,\n\nCan I interest you in looking into this ticket?\n\nI think that fixing it would be supremely helpful. If we fix this, for me,\nlogins will change from taking 60 seconds to taking, like, 1.\n\nIt's also reasonably easy if you know about Python class syntax, and how to run\nthe OpenHatch test suite, and know/want to learn the Django cache API. We can\nmentor you in any of those that you want to learn.\n\n(I've added you as \"nosy\" so you see this update.)\n   \n", "author": "paulproteus"}, {"message": "I plan to write up a Starling Bounty for this. Here's the core issue:\n\nWe use a Django model called the HitCountCache in a few places. This strategy\nhas a flaw: it means that lots of page loads create writes to the database.\n\nWe should replace this with use of the django cache framework, and store the\ncached hit counts in memcached instead.\n\nHere's the work plan that it would take to do the above:\n\n1. Change the HitCountCache class so that it is not a database table, but\ninstead a simple class that wraps the django cache framework\n\n2. Make sure the tests pass\n\n3. Submit a patch with the above.\n\n4. Clean-up the code further by moving all the HitCountCache-related code out of\nmodels.py into a new file you would create, mysite/search/helpers.py \n\n5. Make sure the tests all pass (-:\n\n6. Submit a patch again!\n   \n", "author": "paulproteus"}, {"message": "Traceback (most recent call last):\n\n  File\n\"/home/deploy/milestone-a.buildout/parts/production/django/core/handlers/base.py\",\nline 99, in get_response\n    response = callback(request, *callback_args, **callback_kwargs)\n\n  File \"&lt;string&gt;\", line 2, in home\n\n  File \"/home/deploy/milestone-a.buildout/mysite/base/decorators.py\", line 67,\nin view\n    request, template, view_data = func(*args, **kw)\n\n  File \"/home/deploy/milestone-a.buildout/mysite/base/views.py\", line 94, in home\n    suggested_searches = request.user.get_profile().get_recommended_search_terms()\n\n  File \"/home/deploy/milestone-a.buildout/mysite/profile/models.py\", line 302,\nin get_recommended_search_terms\n    return Person.only_terms_with_results(terms)\n\n  File \"/home/deploy/milestone-a.buildout/mysite/profile/models.py\", line 277,\nin only_terms_with_results\n    hit_count = query.get_or_create_cached_hit_count()\n\n  File \"/home/deploy/milestone-a.buildout/mysite/search/controllers.py\", line\n366, in get_or_create_cached_hit_count\n    defaults={'hit_count': count})\n\n  File\n\"/home/deploy/milestone-a.buildout/parts/production/django/db/models/manager.py\", line\n122, in get_or_create\n    return self.get_query_set().get_or_create(**kwargs)\n\n  File\n\"/home/deploy/milestone-a.buildout/parts/production/django/db/models/query.py\",\nline 336, in get_or_create\n    obj.save(force_insert=True)\n\n  File\n\"/home/deploy/milestone-a.buildout/parts/production/django/db/models/base.py\",\nline 431, in save\n    self.save_base(force_insert=force_insert, force_update=force_update)\n\n  File\n\"/home/deploy/milestone-a.buildout/parts/production/django/db/models/base.py\",\nline 516, in save_base\n    result = manager._insert(values, return_id=update_pk)\n\n  File\n\"/home/deploy/milestone-a.buildout/parts/production/django/db/models/manager.py\", line\n176, in _insert\n    return insert_query(self.model, values, **kwargs)\n\n  File\n\"/home/deploy/milestone-a.buildout/parts/production/django/db/models/query.py\",\nline 1109, in insert_query\n    return query.execute_sql(return_id)\n\n  File\n\"/home/deploy/milestone-a.buildout/parts/production/django/db/models/sql/subqueries.py\",\nline 324, in execute_sql\n    cursor = super(InsertQuery, self).execute_sql(None)\n\n  File\n\"/home/deploy/milestone-a.buildout/parts/production/django/db/models/sql/query.py\",\nline 2347, in execute_sql\n    cursor.execute(sql, params)\n\n  File\n\"/home/deploy/milestone-a.buildout/parts/production/django/db/backends/mysql/base.py\",\nline 84, in execute\n    return self.cursor.execute(query, args)\n\n  File\n\"/home/deploy/milestone-a.buildout/eggs/MySQL_python-1.2.3c1-py2.6-linux-i686.egg/MySQLdb/cursors.py\",\nline 173, in execute\n    self.errorhandler(self, exc, value)\n\n  File\n\"/home/deploy/milestone-a.buildout/eggs/MySQL_python-1.2.3c1-py2.6-linux-i686.egg/MySQLdb/connections.py\",\nline 36, in defaulterrorhandler\n    raise errorclass, errorvalue\n\nOperationalError: (1205, 'Lock wait timeout exceeded; try restarting transaction')\n\nI guess the cached hit count should *not* live in the database. I guess it\nshould live in memcached.\n   \n", "author": "paulproteus"}]}