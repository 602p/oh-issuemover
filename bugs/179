{"status": "resolved", "priority": "bug", "title": "Refactor existing missions code to use a pagestate class", "milestone": "0.10.12", "superceder": "", "nosylist": ["jesstess, paulproteus, pythonian4000"], "assigned": "pythonian4000", "waitingon": "", "keywords": [], "id": "179", "files": [], "history": [{"message": "Some thoughts:\n\nSweet, the tests all pass!\n\nI try to avoid \"*\" imports in our codebase, but I think that it makes sense\nhere. If we do, we should use __all__ in mysite.missions.base.views to limit\nwhat we import to only what we need.\n\nI also see now that the POST handlers would be nicer at the end of the file,\nsince the GET handlers are referred-to by them.\n\nI see now that we're calling out to super() just to pass in the mission name\n(\"Tar\"), so we should probably just make that an attribute of the\nTarMissionPageState class. Then we could skip the __init__() method in the\nsubclasses.\n\nHaving said all that, this is good! Thanks for picking up, and I've marked this\nas resolved. Pushed and deployed.\n   \n", "author": "paulproteus"}, {"message": "Right, I have fixed the errors I was getting in the missions tests andd moved to\nusing super(). Here are the four commits you want (the first is the commit from\nearlier, just rebased so different hash):\n\n<a href=\"http://git.jackgrigg.com/openhatch/patch/?id=ed804be240d5d71923f7f86cecd46100547c60c1\">http://git.jackgrigg.com/openhatch/patch/?id=ed804be240d5d71923f7f86cecd46100547c60c1</a>\n<a href=\"http://git.jackgrigg.com/openhatch/patch/?id=d7b8fa860059be6b5c14e1dcecf5963f7193f141\">http://git.jackgrigg.com/openhatch/patch/?id=d7b8fa860059be6b5c14e1dcecf5963f7193f141</a>\n<a href=\"http://git.jackgrigg.com/openhatch/patch/?id=5804d586b87d654a7121236d431983001afae4e2\">http://git.jackgrigg.com/openhatch/patch/?id=5804d586b87d654a7121236d431983001afae4e2</a>\n<a href=\"http://git.jackgrigg.com/openhatch/patch/?id=0d934cca9a0c3c9a951a26cf62a1ef6095b4c9de\">http://git.jackgrigg.com/openhatch/patch/?id=0d934cca9a0c3c9a951a26cf62a1ef6095b4c9de</a>\n\nThis covers (I think) everything Asheesh mentions up to a pre-reset world. Thoughts?\n   \n", "author": "pythonian4000"}, {"message": "QUOTE:\n\"\nThere are these variables like diffsingle_success. They're intended to pass some\nstate about the mission down into the template. In the case of\ndiffsingle_sucess, I think it means that the single-file diff mission page\nshould tell the user that the mission was *just* completed. You set that to\nFalse and never give it a value, making the template variable not very useful.\n\"\n\nThis was actually the cause of some of the test failures, and was due to me\naccidentally reversing the order in which data was set. Those default=False\nstatements were as you had them, but then you updated the data from a passed-in\narray. In my code, the passed-in array is updated by the underlying\nMissionPageState class and then overwritten by the default values ~_~\n\nMy fix for this is to set the default data values in the same functions where\nthe tests for the non-defaultness of the keys are... Gramatically the last\nsentence fails but I think overall it makes sense =)\n   \n", "author": "pythonian4000"}, {"message": "Mission pages, like the \"Create a tarball\" mission, always have some basic state\nthat's just part of them being a mission.\n\nIf we can simplify the Django view function that generates that view, we can\nmake it easier to create new ones.\n\nJack has a patch in his repository (but sadly it fails some tests) (and he's on\nvacation) that does that.\n\nNext steps:\n\n* Apply his patch to your local repository\n* Fix everything until the tests work\n\n(or change existing behavior and tests)\n   \n", "author": "paulproteus"}, {"message": "Sadly we didn't get this done during 0.10.11. It would be great to have this\ndone for 0.10.12.\n\nJack's patch on the ticket is a good start.\n   \n", "author": "paulproteus"}, {"message": "Jack's going on a trip, so assigning to nobody!\n   \n", "author": "paulproteus"}, {"message": "Hey Jack!\n\nA few thoughts:\n\nOn superclass constructors: You should use super(). See\n<a href=\"http://stackoverflow.com/questions/904036/chain-calling-parent-constructors-in-python\">http://stackoverflow.com/questions/904036/chain-calling-parent-constructors-in-python</a>\n\nThere are these variables like diffsingle_success. They're intended to pass some\nstate about the mission down into the template. In the case of\ndiffsingle_sucess, I think it means that the single-file diff mission page\nshould tell the user that the mission was *just* completed. You set that to\nFalse and never give it a value, making the template variable not very useful.\n\nOne fix is to change your code so that you fill that variable with whatever\nvalue I used to.\n\nOh, and a whole bunch of missions tests fail. (-:\n\nBut generally, this is totally along the lines of what I was looking for. So I'd\nsay you're getting there!\n\n---\n\nAnd now, some rambling notes about the way the code is organized:\n\nAs for the diffsingle_success variable and friends: There are a few variables\nthat indicate that you *just* completed the mission step on this very page load,\nand another set that indicate that the mission step is completed in general.\nThis is the way we modeled things before we thought about \"reset\"ing a mission\nto uncompleted state. It's probably best for this first patch to respect the\nthinking of a pre-reset world.\n\nA follow-up patch would be really great that makes these things even simpler.\nThings like diffsuccess_done should somehow be abstract over\nMissionStepCompletion objects; maybe we shouldn't this state into the template,\nbut instead the view should declare the MissionStepCompletion name that this\npage refers to, and then some generic code in the template can alternate between\n(a) showing the user the input form and (b) showing the user the happy success\nmessage.\n\nI hope that made some sense. Those are my notes for a refactoring that you're\nnot necessarily undertaking at this moment, so we can keep discussing that part.\nThe test failures -- *that*'s urgent!\n   \n", "author": "paulproteus"}, {"message": "Here is a commit for the first (well, second ^_^) part of the bug - all missions\nnow use a subclass of a generic MissionPageTemplate:\n\n<a href=\"http://git.jackgrigg.com/openhatch/patch/?id=14f31b99860c340c59c41b3266f440695471ac5d\">http://git.jackgrigg.com/openhatch/patch/?id=14f31b99860c340c59c41b3266f440695471ac5d</a>\n\nIs this what you were thinking of?\n   \n", "author": "pythonian4000"}, {"message": "In\n<a href=\"http://gitorious.org/openhatch/oh-mainline/commit/4fa7ad70e4edeef99b4f2c7bb3e96871422f0074\">http://gitorious.org/openhatch/oh-mainline/commit/4fa7ad70e4edeef99b4f2c7bb3e96871422f0074</a>\nI re-organized the Subversion training mission code so that the views send their\ninformation to a PageState class, which then generates the dictionary that we\npass to the template.\n\nIt would be great to:\n\n* Change the other missions' templates so that they use the new, simpler\nmission_main_body block\n\n* Change the other missions' views.py so that they use a similar state handling\nclass\n\n* Change the SvnMissionPageState to be a subclass of some master, state-handling\nclass.\n\nThis way, when we want to write a new mission, it will be simpler. (-:\n\n(Jack, I made you nosy 'cause I secretly hope you might take this on.)\n   \n", "author": "paulproteus"}, {"message": "This is the first step on the path to having a coherent Mission HOWTO.\n\nThe missions have a good test suite, so this is actually a good first task for\nsomeone.\n   \n", "author": "paulproteus"}]}