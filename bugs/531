{"status": "resolved", "priority": "bug", "title": "Either adjust our use of zc.buildout so it actually works, or transition us to virtualenv", "milestone": "0.11.07", "superceder": "", "nosylist": ["paulproteus"], "assigned": "paulproteus", "waitingon": "", "keywords": [], "id": "531", "files": [], "history": [{"message": "This is fixed -- forcing the use of distribute, in bootstrap.py, seems to make\nthe difference.\n   \n", "author": "paulproteus"}, {"message": "One other thing: virtualenv has two modes: \"--no-site-packages\" and, well, not\npassing that option in.\n\nFor now, I think that if we go with virtualenv we should permit site packages to\nflow in. This way, the user can install some hard-to-install modules like PIL\nusing their package manager.\n   \n", "author": "paulproteus"}, {"message": "The current state of things\n---------------------------\n\nWe use a tool called 'zc.buildout' (zc is short for 'Zope Corporation' that\nfirst wrote the tool) to create a little Python environment for OpenHatch's\ncode and its dependencies.\n\nThe reason we want to create a little Python environment is that the OpenHatch\nsite, which is contained in a Python module called 'mysite', depends on other\nPython modules. We use two files, buildout.cfg and setup.py, to specify what\nversion of those modules we want, and where to download them.\n\nThis has the following advantages:\n\n* Users run two simple commands to get started:\n\n python bootstrap.py\n bin/buildout\n\nBuildout then installs the dependencies\n\n* The dependency modules don't have to be installed as root.\n\nThis is crucial -- the main point of the \"little Python environment\" is\nthat users can run the OpenHatch code without altering their main system's\nset of Python modules.\n\nWhat's bad about it\n-------------------\n\nThere are approximately three problems with the setup we have now:\n\n1. It is not transparent\n\nWhen 'buildout' runs, it is not clear about why it is doing what\nit is doing. It is also not clear about where it is downloading\ndependencies from.\n\nThis leads to people feeling a little confused -- buildout appears\nto be a magic black box that successfully builds a dev environment...\n...unless it fails to.\n\n2. In some environments, buildout seems to refuse to download anything\n\nThis is pretty killer (in a bad way). It means that new contributors\nare faced with utter failure and no reasonable way to debug it.\n\nThis is the most show-stopper of the problems with buildout. Careful\nreading of the buildout code might help understand why it does this,\nif you can create an environment that reproduces it.\n\n(One easy way to create such an environment, I think, is to take our\nVagrant configuration and run it against an Ubuntu Lucid virtual machine.)\n\nOne downside to buildout is that it seems to be a whole bunch of complex\ncode, and it downloads buildout whenver 'bootstrap' runs.\n\n3. If the system Python environment includes a version of Django newer\n   than what we use in OpenHatch, Buildout uses that newer version,\n   often leading to incompatibility\n\nIf you do:\n\n sudo apt-get install python-django\n\nand you get a 1.3.x version of Django, and you then run buildout, buildout\nwill let the system provide that 1.3.x version to the OpenHatch code.\n\nOften there are backwards-incompatible changes between versions of Django.\nThe result is that a new contributor will say, \"Gosh, I wonder why the OpenHatch\ncode is so broken\" and, since they didn't get any error message or otherwise,\nthink we just ship broken code.\n\nWe use a buildout addon called djangorecipe, which I *think* is supposed to be\nable to avoid this situation, but my new opinion on djangorecipe is that for the\nsmall things we want to do, we should just ditch djangorecipe.\n\nReasonable possible solutions\n-----------------------------\n\nThere are about two ways forward, as far as I can tell:\n\n1. Diagnose the problems with buildout, and fix it\n\nIf we can root-cause and fix the download problem, that would be enough for\nme!\n\n2. Replace buildout with the a simpler setup based on virtualenv\n\nI think that this is probably even better. To see an example of how another\nproject uses virtualenv and setup.py, check out the install instructions\nfor debexpo:\n\n $ git clone git://git.debian.org/debexpo/debexpo.git \n\nThere, you can read the README file.\n\nThe debexpo documentation suggests using a virtualenv whose files live in\n~/.virtualenvs/expo/. I think it would be better if, instead, the virtualenv\nlives in \".\" -- the directory that holds the code.\n   \n", "author": "paulproteus"}]}