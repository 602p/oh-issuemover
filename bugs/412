{"status": "resolved", "priority": "bug", "title": "Git training mission repository should use \"git am\" to apply the patch (but does not)", "milestone": "0.11.05", "superceder": "", "nosylist": ["palhmbs, paulproteus"], "assigned": "palhmbs", "waitingon": "", "keywords": [], "id": "412", "files": [{"url": "http://openhatch.org/bugs/file293/0001-Git-commit-author3.patch", "author": "palhmbs"}, {"url": "http://openhatch.org/bugs/file302/0001-Git-diff-patch-tests.patch", "author": "palhmbs"}], "history": [{"message": "This is live now. Very exciting.\n   \n", "author": "paulproteus"}, {"message": "I still think that the \"!= 1\" is confusing. I've replaced it with \"== 0\" instead.\n\nOther than that, I like these! Pushed to origin/master; once Hudson says they're\ngood, I'll deploy.\n   \n", "author": "paulproteus"}, {"message": "Done. You should be fine with applying 0001-Git-Commit-author3.patch first then the 0001-Git-diff-\npatch-tests.patch. At least that was the order I created them. ;-)\n   \n", "author": "palhmbs"}, {"message": "Paul,\n\nThere are a lot of files here. Can you delete the ones that no longer need\nreview, and then tell me which ones to apply, in which order?\n   \n", "author": "paulproteus"}, {"message": "A modified test.\n   \n", "author": "palhmbs"}, {"message": "Your concern seems unfounded, as\nif commit_diff.returncode != 1: == is checking whether the returncode is not 1  -- bd\n\nI'll try changing the def test_do_diff_mission_correctly(self): &amp; def \ntest_do_diff_mission_incorrectly(self): tests in any case.\n   \n", "author": "palhmbs"}, {"message": "Paul,\n\nThis is some complex functionality, so we should wrap it in tests. I'm glad \nyou're convinced the implementation works. Can you write up a quick test that \nshows that? I'm concerned by you checking the returncode being 1; usually for \ncommand line apps, 1 indicates an error.\n\nIt should be easy enough to do write that test; just call the controller class \ndirectly, passing it input.\n\nThis is good work so far; thank you for getting it this far.\n   \n", "author": "paulproteus"}, {"message": "Ok, I think I've mastered this. - Please review!\n   \n", "author": "palhmbs"}, {"message": "Just a few things that should get cleaned up here:\n\n* You seem to be adding a commented-out line. That's usually not a good idea. If\nthe line should get removed, just remove it.\n\n* You should check that the exist status of \"git am\" is zero.\n\n* You don't need the extra quotation marks in the final call to \"git commit\". To\nbe precise, do this:\n\nsubprocess.Popen(['git', 'commit', '--allow-empty', '-m', commit_msg],\ncwd=repo.repo_path)\n\ninstead of\n\nsubprocess.Popen(['git', 'commit', '--allow-empty', '-m', '\"' + commit_msg +\n'\"'], cwd=repo.repo_path)\n\n(The great thing about the subprocess module is that it handles all the escaping\nfor you. Adding quotation marks there, therefore, will add them literally to the\ndata that we use as the commit log message. By the way, this is a *totally super\nawesome* thing about subprocess, that we can relax and not worry about escaping.\nLife is grand when we have good tools.)\n\nYou're on the right track. Thanks for getting this far.! Can you fix those\nthings and resubmit it?\n   \n", "author": "paulproteus"}, {"message": "Ok, now we are submitting the users diff output through to git am\nand then adding a commit message over the top.\n\nPlease review!\n   \n", "author": "palhmbs"}, {"message": "But that's not a proper simulation of what happens with a real project, because \nin a real project, the user's git configuration chooses what name and email \naddress shows up.\n\nI think we should really use 'git am' unless you can simulate it in another way \nthat works just as well.\n\nIf we go the 'git am' route, we'll need to pass the user's input to 'git am' in \nthat case. We can do that with subprocess module. If you need help with it, just \nask.\n   \n", "author": "paulproteus"}, {"message": "Attached is a patch that should resolve this issue.\nSince the openhatch users name will now appear in the git log.\n   \n", "author": "palhmbs"}, {"message": "Let's just change the commit with --author=\"openhatch username \n&lt;<a href=\"mailto:username@openhatch.org\">username@openhatch.org</a>&gt;\" ??\n   \n", "author": "palhmbs"}, {"message": "The git mission, as it stands right now, has \"The Brain\" be the author of the \nsecond commit, even though the user submitted a patch file.\n\nThe correct behavior is that the user's patch file guides the author, so the user \ncan see (enthusiastically) that his/her name appears in 'git log'.\n\nTo fix this, we need to have the mission use 'git am' to apply the patch.\n\nWe can add a commit on top with the secret word so that the rest of the code \ndoesn't have to change.\n   \n", "author": "paulproteus"}]}