{"status": "chatting", "priority": "bug", "title": "old_trac handling passes data through transits in an invalid way", "milestone": "later", "superceder": "", "nosylist": ["berryp, jwm, paulproteus"], "assigned": "", "waitingon": "", "keywords": [], "id": "721", "files": [], "history": [{"message": "This sure is a bug, but if 0.12.02 is so late already, I'll push it out.\n   \n", "author": "paulproteus"}, {"message": "In oh-bugimporters, bugimporters/trac.py checks if the remote bug tracker seems\nto be the \"old\" kind that requires extra scraping to get all the metadata.\n\nThis commit removed that functionality --\n<a href=\"https://github.com/openhatch/oh-bugimporters/commit/425f5f6d5ab3113ac5928a697f2d19ae7c569ef3\">https://github.com/openhatch/oh-bugimporters/commit/425f5f6d5ab3113ac5928a697f2d19ae7c569ef3</a>\n-- because it was crashing.\n\nThe simple way to fix this is to make sure that this case gets covered in the\nunit tests, and look at the old mysite/customs/bugimporters/trac.py code to see\nhow things were done there, and make corresponding changes.\n\nThe other way to fix it would be to rewrite the old_trac handling so that it\ndoesn't store the RSS-type data in the Django database. Instead, it could just\nretain a local HTTP cache of the RSS feed contents, and re-parse that every time\nit refreshes a bug stored in a old_trac-type tracker. (Hope that makes sense. If\nnot, I'm happy to explain this idea. It's not the fastest way to fix the\nproblem, anyway.)\n   \n", "author": "paulproteus"}]}