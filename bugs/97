{"status": "resolved", "priority": "feature", "title": "Trac bug tracker issues: Some trackers don't have a timeline", "milestone": "0.11.01", "superceder": "", "nosylist": ["paulproteus, pythonian4000"], "assigned": "pythonian4000", "waitingon": "", "keywords": [], "id": "97", "files": [], "history": [{"message": "That looks great.\n\nThe code makes lots of sense. It's well-commented, which is great, and the\ncommit log message is clear.\n\nWe should really get in the habit of writing tests for these things, but I'm\nokay with delaying that until the async-ification of bug tracker import.\n\nPushed to master!\n   \n", "author": "paulproteus"}, {"message": "Here is my first go at this. It successfully grabs datetimes for old Trac\ntrackers via RSS feeds. The only one I haven't enabled is Django; it has so many\nbugs that the RSS feed is huge, and for some reason Django generates the entire\nthing before serving it, unlike the other ones I tested, meaning that the\nfeedparser times out and says that there are no updates. Once it has been\nupdated once then Django would be fine, using RSS like the others, but I don't\nknow if I can justify writing an HTML scraper just for the initial import. Maybe\nif other trackers have the same issue...\n\nAnyway, link!\n\n<a href=\"http://git.jackgrigg.com/openhatch/patch/?id=eb44ba3c200cab26e894a094d019b5ce580d89d7\">http://git.jackgrigg.com/openhatch/patch/?id=eb44ba3c200cab26e894a094d019b5ce580d89d7</a>\n\nJust to record it here, an improvement I would like to make is to grab all the\ninfo from the timeline rather than the individual bugs' RSS feeds as well. On\nthe Django tracker at least, you can show all bug updates on the timeline, not\njust \"created\", \"closed\" and \"reopened\". This would speed up things greatly and\nreduce network load; however there is no way to determine this programmatically.\nI guess it would end up being an optional flag like old_trac is in this patch.\n   \n", "author": "pythonian4000"}, {"message": "I'll chuck myself on this. I'll try and separate out the code written and\ndatabases createds so that we only need invoke it for old Trac trackers (e.g.\nwith a boolean flag in setup).\n\nI'm away until the 17th of January, so will start after then.\n   \n", "author": "pythonian4000"}, {"message": "At this point, I'm willing to go with \"Grab a lot more data from the bug tracker\".\n\nI owe it to mizmo to import her issues from the Fedora Design Team bug tracker,\nand fedorahosted.org shows no sign of upgrading Trac.\n\nLeaving un-assigned for now, in case someone else wants to give it a shot.\n   \n", "author": "paulproteus"}, {"message": "This would require one hell of a hack, and we would either only get ballpark\nfigures or grab a lot more data from the tracker.\n\nThe problem is that the only two sources of data we have for Trac bugs are its\nwebpage and its CSV file, and there are no CSV entries for the Opened or Last\nModified datetimes. In the newer Trac versions there are links to the timeline\non the bug's webpage, and these require the exact datetime in the link URL,\nwhich is what we grab. Without that URL information, we only have the text to go\non i.e. \"7 months ago\", which is useless.\n\nI can think of two hacks. First one would be to pull datetime data directly from\nthe project's timeline. This would give complete and correct data for the Opened\nand Last Modified datetimes, but I have no idea how this would work and it would\nlikely be quite network-intensive. The other hack would be to have the bug\ndefault to the current time when saving the bug. This would only work for the\nOpened datetime, and it would sometimes be wrong e.g. when pulling all the bugs\nfor the first time - but new bugs would have Opened datetimes within the\nfrequency of importer runs i.e. within 24 hours.\n   \n", "author": "pythonian4000"}, {"message": "The next step is to test our Trac importing code against a 0.10.x bug tracker\nand come up with enough hacks to be satisfied with how well it works.\n   \n", "author": "paulproteus"}, {"message": "I'll email the SSSD Trac admin listed on the wiki.\n\nIf upgrading is easy, great! If not, we'll just write some more code. :D\n   \n", "author": "paulproteus"}, {"message": "Deployed!\n\nFor the timeline/bug data thing, do you want to write those emails to Trac \nadmins, or do you want me to? (Is there a way we can use e.g. CSV export to work \naround the missing data? If so, then we can avoid sending emails.)\n\nOnce we resolve that, we can close this once and for all.\n   \n", "author": "paulproteus"}, {"message": "I think this is where we are at:\n\nBug timeline: As far as I can see we just have to wait for the trackers in\nquestion to upgrade their version of Trac. Maybe fire off an email to them?\nOtherwise done.\n\nas_appears_in_distribution: Now that Trac and Bugzilla both have\nextrack_tracker_specific_information methods, we just set this parameter in\nthere. The supplied patch has a commit which does this. So done.\n\nProject name vs. component: This has been sorted in the code, either by the bug\nproject format string or in some cases overloading the generate_bug_project_name\nmethod. So done.\n\nOLPC naming: I've looked through the component names again for OLPC, and with\nas_appears_in_distribution now set for OLPC I think these are okay. The supplied\npatch has a commit which sets the bug project name format string and enables\nOLPC bug importing. So done.\n\nNote that this patch needs to be applied AFTER the patch that moves all the bug\nimport code to customs.\n   \n", "author": "pythonian4000"}, {"message": "Jack, I'm kind of confused. What's the next step for this bug? (Is there one?)\n   \n", "author": "paulproteus"}, {"message": "re: bug timeline: Yeah, I think you're right now.\n\nre: as_appears_in_distribution: That makes sense!\n\nre: project name vs. component: I like this, good thinking!\n\nFor the OLPC/Sugar things, \"*-activity\" is really the project name, so I think\nthat it's okay to keep those as the project name in OpenHatch.\n   \n", "author": "paulproteus"}, {"message": "Re: Lack of bug timeline:\nThat's not the case. Take <a href=\"https://fedorahosted.org/sssd/\">https://fedorahosted.org/sssd/</a> for instance - it has a\ntimeline, but it doesn't have hyperlinks. And the .csv format doesn't include\n\"Opened\" and \"Last modified\" information. I did notice though that the above\nfedorahosted tracker is using Trac version 0.10.5, whereas most of the trackers\nfrom memory were using a 0.11 variant. There are only three trackers at present\nwith this problem - two are on the fedorahosted tracker and the other is Django\nwhich doesn't display version information for Trac. My guess is it IS related to\nTrac version, but without more examples of this issue I can't be certain.\n\nRe: Project name vs. Component:\nFollowing the discussion on IRC, I am adding an extra method to generate the\nbug's project name. Rather than overloading it for every Class though, I am\npassing in a format string in the Class __init__ which the method then uses to\ncreate the name. The format string is of the form \"{component} in {project}\",\nwith \"{component}\" and \"{project}\" being replaced as expected. I figured this\nallowed the most flexibility in how the end name is given.\n\nRe: as_appears_in_distribution:\nShould there be an option to set this for the Trac bugs? For example, it would\nmake sense to me for this to be the case with Sugar Labs and OLPC. I was\nthinking maybe a boolean flag, and if it was True then set\nas_appears_in_distribution to self.project_name (not the generated\nbug_project_name).\n\nThe main issue I have with naming is the untidiness of just using the component.\nCase in point - for OLPC, it would make sense too use the component name; but\nwhile some have names which should really be used alone (\"glibc\", \"cerebro\",\n\"olpc-games\"), there are some ones which don't make as much sense out of context\n(all of the \"*-activity\" components), and then some which should not be used on\ntheir own as a project name EVER (\"display\", \"kernel\", \"library\"). Thoughts? Ideas?\n   \n", "author": "pythonian4000"}, {"message": "re: lack of bug timeline: Whoa, weird. Maybe it's because those projects have \nthe timeline disabled. We can probably get that data by looking at the .csv \nexport Trac offers for each bug -- have you tried that?\n\nre: projects not having the same fields: I think it's user-selected.\n\nre: project name vs. component: Some bug trackers (like Sugar Labs's bug \ntracker) really track one project per component. But others (like Tahoe-LAFS) \nmake this configurable. So really it should be an option to the Trac bug \nimporting class.\n\nre: as_appears_in_distribution: We set this if we import a bug from Fedora or \nUbuntu where the *project* is really e.g. xserver-xorg. So it's a bug in the X \nserver, as the X server appears in Fedora. In that case, we put \"Fedora\" in that \ncolumn. Feel free to write some documentation in the search/models.py so that \nthis is clearer...\n   \n", "author": "paulproteus"}, {"message": "Unless anyone else has suggestions for the third point below, I'm going with this:\n\n&lt;paulproteus&gt; [14:12] It seems the Trac importer for Tahoe-LAFS isn't importing\nthings right.\n&lt;paulproteus&gt; [14:12] In particular, the project name should be \"Tahoe-LAFS\" but\ninstead it's pulling the project name from something like the Trac \"component\"\n\nSo I'm just going to change the Trac bug importer to use the project name rather\nthan the component name.\n   \n", "author": "pythonian4000"}, {"message": "This is a list of issues that I encountered with the Trac bug trackers. I have\ntried a workaround for some, and have disabled the bug tracker for others.\n\n* Some trackers don't have a hyperlink to the bug timeline for their 'Opened'\nand 'Last modified' fields (e.g. Django). The hyperlink normally present has the\nexact date needed as part of the &lt;a&gt; tag, and without it we cannot determine\nthese dates (since the user-displayed text only is accurate to within months or\nyears for longer bugs). This means that those trackers break the Trac bug data\nimporter, and have to be disabled. I am unsure if this is a user-selected or\nTrac version-related issue. If it is user-related, possibly drop the tracker\nadmin an email politely asking why they choose to not have a bug timeline. If\nrelated to the Trac version, possibly drop the tracker admin an email politely\nasking if they could update their version of Trac.\n\n* Some trackers don't have as much information on the bug tickets as others e.g.\nAngband doesn't have the 'priority' field (though it does have a 'ticket' field\nwhich seems similar-ish). Again, not sure if this is user-selected or related to\nthe version of Trac they are using. This doesn't seem too major to me at\npresent, since if this is resolved later on the bug data will be updated anyway.\n\n* I noticed that the project name for the bugs is set to the name of the\ncomponent it is part of. While this is true, I have found several projects that\ndon't have very \"useful\" component names. I also saw that there is a bug data\nfield called 'as_appears_in_distribution' - what is the current purpose of this?\nWould it be useful to set this to the name of the overriding project the\ncomponent belongs to?\n\nI will add more things as I find them.\n   \n", "author": "pythonian4000"}]}